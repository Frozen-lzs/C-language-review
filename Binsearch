/*
    在有序数组中查询具体某个数字n。
    编写int binsearch(int x,int arr[],int n);
    功能：在arr[0]<=arr[1]<=arr[2]<=..<=arr[n-1]的数组中查找x
*/
#include <stdio.h>

/*
    函数名：Binsearch
    函数变量：x ==》 要查找的数据
            arr[] ==》 有序数组
            n ==》 该数组的元素个数
    返回值：找到则返回该元素下标；
            找不到则返回-1.
*/
int Binsearch(int x, int arr[], int n)
{
    int left = 0, right = n - 1; // left左下标，right右下标

    // 当左下标小于等于右下标时才执行
    while (left <= right)
    {
        int mid = (left + right) / 2; // mid中间的下标
        if (arr[mid] < x)//中间元素比查找的数字要小
        {
            left = mid + 1;//查找中间元素右侧的数组，则左下标变为当前中间元素的右一个
        }
        else if (arr[mid] > x)//中间元素比查找的数字要大
        {
            right = mid - 1;//查找中间元素左侧的数组，则右下标变为当前中间元素的左一个
        }
        else//中间元素等于查找的数字
        {
            // printf("找到了，下标是%d\n", mid);
            // break;
            return mid;
        }
    }
    if (left > right)
    {
        // printf("找不到!\n");
        return -1;
    }
}

int main(int argc, char const *argv[])
{
    int arr[10] = {1, 2, 3, 5, 7, 8, 9, 11, 13, 14};
    int sz = sizeof(arr) / sizeof(arr[0]); // 计算数组的个数
    int ret = 0;
    int a = 0;

    printf("请输入要查找的数字：");
    scanf("%d", &a);

    ret = Binsearch(a, arr, sz);
    if (ret == -1)
    {
        printf("找不到!\n");
    }
    else
    {
        printf("找到了，下标是%d\n", ret);
    }

    return 0;
}
